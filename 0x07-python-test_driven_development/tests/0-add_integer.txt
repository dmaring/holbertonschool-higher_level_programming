The ``add_integer`` module
======================

Using ``add_integer``
-------------------

add_integer adds two integers together: a and b. First import ``add_integer``
from the ``example`` module:

>>> add_integer = __import__('0-add_integer').add_integer

Check that numbers are added correctly and floats are cast to integers

>>> add_integer(20.3, 23.5)
43

>>> add_integer(20, 23)
43

>>> add_integer(-5, 12)
7

>>> add_integer(5, -12)
-7

Check that function handles only first argument given

>>> add_integer(3)
101

Check that function raises error if one of args is not int or float

>>> add_integer('a', 10)
Traceback (most recent call last):
...
    raise TypeError("a must be an integer")
TypeError: a must be an integer

>>> add_integer(10, 'b')
Traceback (most recent call last):
...
    raise TypeError("a must be an integer")
TypeError: b must be an integer

Check to raise error if first arg is None (2nd number has default value)

>>> add_integer(None, )
Traceback (most recent call last):
...
    raise TypeError("a must be an integer")
TypeError: a must be an integer

Check for NaN
>>> add_integer(float('nan'), 3)
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

Check for NaN
>>> add_integer(3, float('nan'))
Traceback (most recent call last):
...
    raise TypeError("a must be an integer")
ValueError: cannot convert float NaN to integer

Check for infinity
>>> add_integer(3, float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

Check for infinity
>>> add_integer(float('inf'), 3)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

Check for negative infinity
>>> add_integer(float('-inf'), 3)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

Check for negative infinity
>>> add_integer(3, float('-inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer
